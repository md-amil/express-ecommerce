{
  "version": 3,
  "sources": ["src/index.js", "src/routes/index.js", "src/routes/product.route.js", "src/controllers/product.controller.js", "src/models/index.js", "src/models/category.model.js", "src/models/productCategory.model.js", "src/controllers/category.controller.js", "src/routes/category.route.js", "src/utils/index.js"],
  "sourcesContent": ["import express from 'express'\nimport bodyParser from 'body-parser'\nimport routes from './routes/index.js';\nimport connection from './utils/index.js';\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n\n// app.use((req, res, next) => {\n//   res.header('Access-Control-Allow-Origin', '*');\n//   res.header('Access-Control-Allow-Methods', 'GET, POST');\n//   res.header('Access-Control-Allow-Headers', 'Content-Type');\n//   next();\n// });\n\napp.use('/',routes)\nconnection.on(\"connect\", () => console.log(\"database connected successfully\"));\n// Start the server\n\n\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n", "import { Router } from \"express\";\nconst routes = Router();\nimport productRouter from \"./product.route\";\nimport categoryRouter from \"./category.route\";\n\n// routes.get('/',(req,res)=>res.send(\"working\"))\n// routes.get('/products',get)\n// routes.get('/products/:id',show)\n// routes.post('/products',store)\n// routes.put('/products/:id',update)\n// routes.delete('/products/:id', remove)\n\nroutes.use(\"/products\", productRouter);\nroutes.use(\"/categories\", categoryRouter);\n\nexport default routes;", "import { Router } from \"express\";\nimport { productController } from '../controllers';\nconst  router = Router();\nconst { get, store, show, update, remove } = productController;\n\nrouter.route(\"/\").get(get).post(store);\nrouter.route(\"/:id\").get(show).put(update).delete(remove);\n\nexport default router", "import productModel from \"../models\"\nimport categoryModel from \"../models/category.model\"\nimport productCategoryModel from \"../models/productCategory.model\"\n\nexport async function get(req, res) {\n   const products = await productModel.find().populate({\n    path: 'categories',\n    populate: { path: 'categoryId' }\n  })\n   return res.json(products)\n}\n\nexport async function show(req, res) {\n   const {id} = req.params\n   const products = await productModel.findById(id)\n   return res.json(products)\n}\n\nexport async function store(req, res) {\n   const { name, price, categoryId } = req.body\n   const product = new productModel({\n      name,\n      price,\n   })\n   const procat = new productCategoryModel({\n      productId : product._id,\n      categoryId : categoryId,\n   })\n   await product.save()\n   await procat.save()\n   return res.json(product)\n}\n\nexport async function update(req, res) {\n   const { id } = req.params\n   const { name } = req.body\n   const { price } = req.body\n   const product = await productModel.findByIdAndUpdate(id ,{name},{price},{new:true})\n   return  res.json(product);\n}\n\nexport async function remove(req, res) {\n   const { id } = req.params\n   const product = await productModel.findByIdAndDelete(id)\n   return  res.send(\"SuccessFully Removed!!\");\n}\n", "import mongoose, { Schema } from \"mongoose\";\n\nconst productSchema = new Schema({\n  name:{\n    type: String,\n    required: true,\n    default: \"\",\n  },\n  price: {\n    type: Number,\n    required:true,\n    default:0\n  },\n\n}, {\n  toJSON: { virtuals: true ,  versionKey:false,}\n});\n\nproductSchema.virtual('categories', {\n  ref: 'ProductCategory',\n  localField: '_id',\n  foreignField: 'productId',\n  justOne: false,\n});\n\nconst productModel = mongoose.model(\"Product\", productSchema);\nexport default productModel\n\n", "import mongoose, { Schema } from \"mongoose\";\n\nconst categorySchema = new Schema({\n  name:{\n    type: String,\n    required: true,\n    default: \"\",\n    },\n}, {\n  toJSON: { virtuals: true }\n});\n\ncategorySchema.virtual('products', {\n  ref: 'ProductCategory',\n  localField: '_id',\n  foreignField: 'categoryId'\n});\n\nconst categoryModel = mongoose.model(\"category\", categorySchema);\nexport default categoryModel\n", "import mongoose, { Schema } from \"mongoose\";\n\nconst schema = new Schema({\n  productId: { type: Schema.Types.ObjectId, ref: 'Product', required: true },\n  categoryId: { type: Schema.Types.ObjectId, ref: 'category', required: true }\n});\n\nconst productCategoryModel = mongoose.model(\"ProductCategory\", schema);\nexport default productCategoryModel\n", "import categoryModel from \"../models/category.model\"\n\nexport async function get(req, res) {\n   const categories = await categoryModel.find().populate({\n    path: 'products',\n    populate: { path: 'productId' }\n  })\n   return res.json(categories)\n}\n\nexport async function show(req, res) {\n   const {id} = req.params\n   const categories = await categoryModel.findById(id)\n   return res.json(categories)\n}\n\nexport async function store(req, res) {\n   const {name} = req.body\n   const category = new categoryModel({\n      name,\n   })\n   await category.save()\n   return res.json(category)\n}\n\nexport async function update(req, res) {\n   const { id } = req.params\n   const { name } = req.body\n   const category = await categoryModel.findByIdAndUpdate(id ,{name},{new:true})\n   return  res.json(category);\n}\n\nexport async function remove(req, res) {\n   const { id } = req.params\n   const category = await categoryModel.findByIdAndDelete(id)\n   return  res.send(\"SuccessFully Removed!!\");\n}\n", "import { Router } from \"express\";\nimport { categoryController } from '../controllers';\nconst  router = Router();\nconst { get, store, show, update, remove } = categoryController;\n\nrouter.route(\"/\").get(get).post(store);\nrouter.route(\"/:id\").get(show).put(update).delete(remove);\n\nexport default router", "import mongoose from \"mongoose\";\n  mongoose.Promise = global.Promise;\n\nconst mongoURI = \"mongodb://localhost:27017/ecommerce\";\nmongoose\n  .connect(mongoURI, {\n    // useNewUrlParser: true,\n\t// useUnifiedTopology: true,\n\t// useCreateIndex: true,\n\t// useFindAndModify: false\n  })\n  .then(() => console.log(\"Successfully connect to MongoDB.\", mongoURI))\n  .catch((err) => {\n    console.error(\"Connection error\", err);\n    process.exit();\n  });\n\nconst connection = mongoose.connection;\nexport default connection;"],
  "mappings": "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",
  "names": ["Router", "mongoose", "Schema", "mongoose", "Schema", "get", "remove", "show", "store", "update", "get", "show", "store", "update", "remove", "get", "store", "show", "update", "remove", "Router", "router", "Router", "get", "store", "show", "update", "remove", "Router", "mongoose"]
}
