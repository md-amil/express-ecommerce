{
  "version": 3,
  "sources": ["src/index.js", "src/routes/index.js", "src/models/index.js", "src/controllers/product.controller.js", "src/utils/index.js"],
  "sourcesContent": ["import express from 'express'\nimport bodyParser from 'body-parser'\nimport routes from './routes/index.js';\nimport connection from './utils/index.js';\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n\n// app.use((req, res, next) => {\n//   res.header('Access-Control-Allow-Origin', '*');\n//   res.header('Access-Control-Allow-Methods', 'GET, POST');\n//   res.header('Access-Control-Allow-Headers', 'Content-Type');\n//   next();\n// });\n\napp.use('/',routes)\nconnection.on(\"connect\", () => console.log(\"database connected successfully\"));\n// Start the server\n\n\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n", "import { Router } from \"express\";\nimport { get, remove, show, store, update } from \"../controllers/product.controller.js\";\nconst routes = Router();\n\nroutes.get('/',(req,res)=>res.send(\"working\"))\nroutes.get('/products',get)\nroutes.get('/products/:id',show)\nroutes.post('/products',store)\nroutes.put('/products',update)\nroutes.delete('/products',remove)\nexport default routes;", "import mongoose, { Schema } from \"mongoose\";\n\nconst productSchema = new Schema({\n  name:{\n    type: String,\n    required: true,\n    default: \"\",\n  },\n  price: {\n    type: Number,\n    required:true,\n    default:0\n  },\n  categoryId:{\n    type:Schema.Types.ObjectId\n  }\n});\n\n// videoSchema.methods.findBucket = function (cb: any) {\n//     return cred.findById(this.bucket_id);\n// };\nconst productModel = mongoose.model(\"Product\", productSchema);\nexport default productModel\n", "import productModel from \"../models\"\n\nexport async function get(req, res) {\n   const products = await productModel.find()\n   return res.json(products)\n}\nexport async function show(req, res) {\n   const {id} = req.params\n   const products = await productModel.get()\n   return res.json(products)\n}\nexport async function store(req, res) {\n   const {name,price} = req.body\n   const product = new productModel({\n      name,\n      price\n   })\n   await product.save()\n   return res.json(product)\n }\nexport async function update(req, res) {\n   const {id} = req.params\n   const {name} = req.body\n   return  res.json(response);\n}\nexport async function remove(req, res) {\n   const {id} = req.params\n   return  res.send(\"okey\");\n}\n", "import mongoose from \"mongoose\";\n  mongoose.Promise = global.Promise;\n\nconst mongoURI = \"mongodb://localhost:27018/ecommerce\";\nmongoose\n  .connect(mongoURI, {\n    // useNewUrlParser: true,\n\t// useUnifiedTopology: true,\n\t// useCreateIndex: true,\n\t// useFindAndModify: false\n  })\n  .then(() => console.log(\"Successfully connect to MongoDB.\", mongoURI))\n  .catch((err) => {\n    console.error(\"Connection error\", err);\n    process.exit();\n  });\n\n  const connection = mongoose.connection;\nexport default connection;"],
  "mappings": ";AAAA,OAAO,aAAa;AACpB,OAAO,gBAAgB;;;ACDvB,SAAS,cAAc;;;ACAvB,OAAO,YAAY,cAAc;AAEjC,IAAM,gBAAgB,IAAI,OAAO;AAAA,EAC/B,MAAK;AAAA,IACH,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS;AAAA,EACX;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,UAAS;AAAA,IACT,SAAQ;AAAA,EACV;AAAA,EACA,YAAW;AAAA,IACT,MAAK,OAAO,MAAM;AAAA,EACpB;AACF,CAAC;AAKD,IAAM,eAAe,SAAS,MAAM,WAAW,aAAa;AAC5D,IAAO,iBAAQ;;;ACpBf,eAAsB,IAAI,KAAK,KAAK;AACjC,QAAM,WAAW,MAAM,eAAa,KAAK;AACzC,SAAO,IAAI,KAAK,QAAQ;AAC3B;AACA,eAAsB,KAAK,KAAK,KAAK;AAClC,QAAM,EAAC,GAAE,IAAI,IAAI;AACjB,QAAM,WAAW,MAAM,eAAa,IAAI;AACxC,SAAO,IAAI,KAAK,QAAQ;AAC3B;AACA,eAAsB,MAAM,KAAK,KAAK;AACnC,QAAM,EAAC,MAAK,MAAK,IAAI,IAAI;AACzB,QAAM,UAAU,IAAI,eAAa;AAAA,IAC9B;AAAA,IACA;AAAA,EACH,CAAC;AACD,QAAM,QAAQ,KAAK;AACnB,SAAO,IAAI,KAAK,OAAO;AACzB;AACD,eAAsB,OAAO,KAAK,KAAK;AACpC,QAAM,EAAC,GAAE,IAAI,IAAI;AACjB,QAAM,EAAC,KAAI,IAAI,IAAI;AACnB,SAAQ,IAAI,KAAK,QAAQ;AAC5B;AACA,eAAsB,OAAO,KAAK,KAAK;AACpC,QAAM,EAAC,GAAE,IAAI,IAAI;AACjB,SAAQ,IAAI,KAAK,MAAM;AAC1B;;;AF1BA,IAAM,SAAS,OAAO;AAEtB,OAAO,IAAI,KAAI,CAAC,KAAI,QAAM,IAAI,KAAK,SAAS,CAAC;AAC7C,OAAO,IAAI,aAAY,GAAG;AAC1B,OAAO,IAAI,iBAAgB,IAAI;AAC/B,OAAO,KAAK,aAAY,KAAK;AAC7B,OAAO,IAAI,aAAY,MAAM;AAC7B,OAAO,OAAO,aAAY,MAAM;AAChC,IAAO,iBAAQ;;;AGVf,OAAOA,eAAc;AACnBA,UAAS,UAAU,OAAO;AAE5B,IAAM,WAAW;AACjBA,UACG,QAAQ,UAAU;AAAA;AAAA;AAAA;AAAA;AAKnB,CAAC,EACA,KAAK,MAAM,QAAQ,IAAI,oCAAoC,QAAQ,CAAC,EACpE,MAAM,CAAC,QAAQ;AACd,UAAQ,MAAM,oBAAoB,GAAG;AACrC,UAAQ,KAAK;AACf,CAAC;AAED,IAAM,aAAaA,UAAS;AAC9B,IAAO,gBAAQ;;;AJdf,IAAM,MAAM,QAAQ;AACpB,IAAM,OAAO;AAEb,IAAI,IAAI,WAAW,WAAW,EAAE,UAAU,MAAM,CAAC,CAAC;AAClD,IAAI,IAAI,WAAW,KAAK,CAAC;AAUzB,IAAI,IAAI,KAAI,cAAM;AAClB,cAAW,GAAG,WAAW,MAAM,QAAQ,IAAI,iCAAiC,CAAC;AAK7E,IAAI,OAAO,MAAM,MAAM;AACrB,UAAQ,IAAI,6BAA6B,IAAI,EAAE;AACjD,CAAC;",
  "names": ["mongoose"]
}
